package proyectoarticulosventas;

import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class Ventana extends javax.swing.JFrame implements TableModelListener {

    static final String DDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String base = "depemp2017";
    static final String DB_URL = "jdbc:mysql://localhost/" + base;
    static final String USER = "pepe";
    static final String PASS = "pepa";
    static private String[] v;
    static private String[] columnasNombres = null;
    static private Object[][] datos = null;
    private MySQL sql = new MySQL();

    public Ventana() {
        try {
            initComponents();
            sql = new MySQL();
            sql.conecta(DB_URL, USER, PASS);

            String consulta = "select * from articulos";
            sql.ejecutaConsulta(consulta);

            columnasNombres = sql.daCabeceras(sql.getRs());
            datos = sql.daContenido(sql.getRs());
            
            TablaArt.setModel(new MiModelo(datos, columnasNombres));
//            TablaArt.addMouseListener(new java.awt.event.MouseAdapter() {
//                public void mouseClicked(MouseEvent e) {
//                    
//                }
//            });
            TablaArt.getModel().addTableModelListener(new TableModelListener(){
                @Override
                public void tableChanged(TableModelEvent e) {
                    DefaultTableModel tm = (DefaultTableModel) TablaArt.getModel();
                    int idArt=(int)(tm.getValueAt(TablaArt.getSelectedRow(), TablaArt.getSelectedColumn()));
                    System.out.println(idArt);
//            DefaultTableModel tm = (DefaultTableModel) TablaVentas.getModel();
//            String dato = String.valueOf(tm.getValueAt(TablaVentas.getSelectedRow(), TablaVentas.getSelectedColumn()));
//            String ValorSet = TablaVentas.getColumnName(TablaVentas.getSelectedColumn());
//            String ValorWhere = TablaVentas.getColumnName(0);
//            int pos = ValorWhere.indexOf("[");
                }
            
            
            });
            
//            TablaArt.setEnabled(false);

            sql.getRs().beforeFirst();
            sql.getRs().next();
            int n = (int) sql.getRs().getObject(1);
            String consulta2 = "select * from ventas where idArt= " + n;
            sql.ejecutaConsulta(consulta2);

            TablaVentas.setModel(new MiModelo2(sql.daContenido(sql.getRs()), sql.daCabeceras(sql.getRs())));
            TablaVentas.getModel().addTableModelListener(this);
            initComponents();
        } catch (Exception exc) {

        }
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollTArt = new javax.swing.JScrollPane();
        TablaArt = new javax.swing.JTable();
        ScrollTVentas = new javax.swing.JScrollPane();
        TablaVentas = new javax.swing.JTable();
        insertaBt = new javax.swing.JButton();
        borrarBt = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablaArt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ScrollTArt.setViewportView(TablaArt);

        TablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ScrollTVentas.setViewportView(TablaVentas);

        insertaBt.setText("Insertar");
        insertaBt.addActionListener(formListener);

        borrarBt.setText("Borrar");
        borrarBt.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insertaBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(borrarBt))
                    .addComponent(ScrollTArt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addComponent(ScrollTVentas, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollTArt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(ScrollTVentas, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertaBt)
                    .addComponent(borrarBt))
                .addGap(19, 19, 19))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == insertaBt) {
                Ventana.this.insertaBtActionPerformed(evt);
            }
            else if (evt.getSource() == borrarBt) {
                Ventana.this.borrarBtActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void insertaBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertaBtActionPerformed

    }//GEN-LAST:event_insertaBtActionPerformed

    private void borrarBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBtActionPerformed
        DefaultTableModel tm = (DefaultTableModel) TablaVentas.getModel();
        String ValorWhere = TablaArt.getColumnName(0);
        int pos = ValorWhere.indexOf("[");
        ValorWhere = ValorWhere.substring(0, pos);
        System.out.println(ValorWhere);

        try {
            Connection conexion = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement delete = conexion.prepareStatement(
                    "DELETE from " + base + ".ventas WHERE " + ValorWhere + " = ?");
            delete.setObject(1, String.valueOf(tm.getValueAt(TablaVentas.getSelectedRow(), 1)));
            delete.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        int nFila = TablaVentas.getSelectedRow();

        if (nFila >= 0) {
            tm.removeRow(nFila);
        }
    }//GEN-LAST:event_borrarBtActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        
//        if (e.getType() == TableModelEvent.UPDATE) {
//            int idArt=TablaArt.getSelected
//            DefaultTableModel tm = (DefaultTableModel) TablaVentas.getModel();
//            String dato = String.valueOf(tm.getValueAt(TablaVentas.getSelectedRow(), TablaVentas.getSelectedColumn()));
//            String ValorSet = TablaVentas.getColumnName(TablaVentas.getSelectedColumn());
//            String ValorWhere = TablaVentas.getColumnName(0);
//            int pos = ValorWhere.indexOf("[");
//            ValorWhere = ValorWhere.substring(0, pos);
//            pos = ValorSet.indexOf("[");
//            ValorSet = ValorSet.substring(0, pos);
//            if (TablaVentas.getSelectedColumn()==2) {
//                try {
//                    Connection conexion = DriverManager.getConnection(DB_URL, USER, PASS);
//                    PreparedStatement update = conexion.prepareStatement(
//                            "UPDATE " + base + ".ventas SET " + ValorSet + " = ? WHERE " + ValorWhere + " LIKE ?");
//                    update.setObject(1, dato);
//                    update.setObject(2, String.valueOf(tm.getValueAt(TablaVentas.getSelectedRow(), 0)));
//                    update.executeUpdate();
//                } catch (Exception ex) {
//                    System.out.println(ex.getMessage());
//                }
//            }
//
//        }
    }
    
    public class MiModelo extends DefaultTableModel {
        
        public MiModelo(Object[][] datos, Object[] cabecera){
            super(datos, cabecera);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            // Aquí devolvemos true o false según queramos que una celda
            // identificada por fila,columna (row,column), sea o no editable
//            if (column == 3) {
//                return true;
//            }
            return false;
        }
    }
    public class MiModelo2 extends DefaultTableModel {
        
        public MiModelo2(Object[][] datos, Object[] cabecera){
            super(datos, cabecera);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 2) {
                return true;
            }
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollTArt;
    private javax.swing.JScrollPane ScrollTVentas;
    private javax.swing.JTable TablaArt;
    private javax.swing.JTable TablaVentas;
    private javax.swing.JButton borrarBt;
    private javax.swing.JButton insertaBt;
    // End of variables declaration//GEN-END:variables
}
